pub fn serialise(&self) -> Vec<u8> {
        use PortOutputSubcommand::*;
        match &self.subcommand {
            StartSpeed {
                speed,
                max_power,
                use_acc_profile,
                use_dec_profile,
            } => {
                let profile =
                    ((*use_acc_profile as u8) << 1) | (*use_dec_profile as u8);
                let speed = speed.to_le_bytes()[0];
                vec![
                    0, // len
                    0, // hub id
                    MessageType::PortOutputCommand as u8,
                    self.port_id,
                    0x11,
                    0x01,
                    speed,
                    max_power.to_u8(),
                    profile,
                ]
            }
            WriteDirectModeData(data) => data.serialise(self),
            _ => todo!(),
        }
    }

    pub fn serialise(&self) -> Vec<u8> {
        let mut msg = Vec::with_capacity(10);
        msg.extend_from_slice(&[
            0,
            0,
            MessageType::PortInputFormatSetupSingle as u8,
            self.port_id,
            self.mode,
        ]);
        msg.extend_from_slice(&self.delta.to_le_bytes());
        msg.push(self.notification_enabled as u8);
        msg
    }